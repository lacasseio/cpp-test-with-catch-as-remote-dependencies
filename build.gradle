/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1/userguide/building_cpp_projects.html
 */

plugins {
    // Apply the cpp-application plugin to add support for building C++ executables
    id 'cpp-application'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    id 'cpp-unit-test'
}

// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.macOS.x86_64)
}

// Configure unit test for Catch2
unitTest {
    binaries.configureEach {
        compileTask.get().compilerArgs.add('-std=c++11')
    }
}

////
//// Attempt #1: Using `implementation` configuration inside `unitTest` DSL with a custom layout repository
////
//repositories {
//    ivy {
//        name = 'GitHub - Catch2'
//        url 'https://github.com/'
//        patternLayout {
//            artifact '[organisation]/[module]/releases/download/v[revision]/catch.hpp'
//        }
//        metadataSources {
//            artifact()
//        }
//    }
//}
//unitTest {
//    // The following cannot be used because it may try to use the hpp as zip and static/shared library.
//    // Note: it's currently failing because HEAD request are forbidden by GitHub, see https://github.com/gradle/gradle/issues/5322
//    dependencies {
//        implementation 'catchorg:Catch2:2.11.1'
//    }
//}

////
//// Attempt #2: Using `cppCompileTest` configuration with a custom layout repository
////
//repositories {
//    ivy {
//        name = 'GitHub - Catch2'
//        url 'https://github.com/'
//        patternLayout {
//            artifact '[organisation]/[module]/releases/download/v[revision]/catch.hpp'
//        }
//        metadataSources {
//            artifact()
//        }
//    }
//}
//// The following cannot be used because the configuration `cppCompileTest` should be expecting a zip file containing all headers.
//// Note: it's currently failing because HEAD request are forbidden by GitHub, see https://github.com/gradle/gradle/issues/5322
//// Note: This is needed in a configuration case like the following as the configuration are created in a afterEvaluate hook
//afterEvaluate {
//    dependencies {
//        // Note: The configuration cppCompileTest is opinionated to expect a zip file containing all headers
//        cppCompileTest 'catchorg:Catch2:2.11.1'
//    }
//}


////
//// Attempt #3: Using a custom layout repository for Catch2 GitHub releases
////
//// Note: it's currently failing because HEAD request are forbidden by GitHub, see https://github.com/gradle/gradle/issues/5322
//repositories {
//    ivy {
//        name = 'GitHub - Catch2'
//        url 'https://github.com/'
//        patternLayout {
//            artifact '[organisation]/[module]/releases/download/v[revision]/catch.hpp'
//        }
//        metadataSources {
//            artifact()
//        }
//    }
//}
//configurations {
//    cppCompileCatch2
//}
//dependencies {
//    cppCompileCatch2 'catchorg:Catch2:2.11.1'
//}
//unitTest {
//    binaries.configureEach {
//        compileTask.get().includes.from(project.provider {
//            return [configurations.cppCompileCatch2.singleFile.parentFile]
//        })
//    }
//}

//
// Attempt #4: Using ad-hoc task
//
// This solution works but won't be performant. It would be better to create a custom task that is cacheable.
def catch2IncludeRoot = layout.buildDirectory.dir('catch2-includes')
def downloadCatch2Task = tasks.register('downloadCatch2') {
    doLast {
        catch2IncludeRoot.get().asFile.mkdirs()
        catch2IncludeRoot.get().file('catch.hpp').asFile << new URL('https://github.com/catchorg/Catch2/releases/download/v2.11.1/catch.hpp').text
    }
}
def catch2IncludeRoots = project.files(catch2IncludeRoot).builtBy(downloadCatch2Task)
unitTest {
    binaries.configureEach {
        compileTask.get().includes.from(catch2IncludeRoots)
    }
}
